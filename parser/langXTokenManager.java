/* langXTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. langXTokenManager.java */
package parser;
import java.io.*;
import recovery.*;
                     // importa as classes de recuperação de erros do AS
import syntacticTree.*;
                        // importa as classes dos nos da árvore sintática
import semanalysis.*;

/** Token Manager. */
@SuppressWarnings("unused")public class langXTokenManager implements langXConstants {
int countLexError = 0;

public int foundLexError()
{
   return countLexError;
}

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 45;
            return 13;
         }
         if ((active0 & 0x200000000000000L) != 0L)
            return 16;
         if ((active0 & 0x4ffff7c000L) != 0L)
         {
            jjmatchedKind = 45;
            return 86;
         }
         if ((active0 & 0x2L) != 0L)
            return 49;
         if ((active0 & 0x400000000000000L) != 0L)
            return 5;
         if ((active0 & 0x80000000000000L) != 0L)
            return 56;
         return -1;
      case 1:
         if ((active0 & 0x4ebfefc000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
            }
            return 87;
         }
         if ((active0 & 0x140100000L) != 0L)
            return 87;
         return -1;
      case 2:
         if ((active0 & 0x4eff87c000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
            return 87;
         }
         if ((active0 & 0x680000L) != 0L)
            return 87;
         return -1;
      case 3:
         if ((active0 & 0xaee85c000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
            return 87;
         }
         if ((active0 & 0x4411020000L) != 0L)
            return 87;
         return -1;
      case 4:
         if ((active0 & 0xa66050000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
            return 87;
         }
         if ((active0 & 0x8880c000L) != 0L)
            return 87;
         return -1;
      case 5:
         if ((active0 & 0x820050000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
            return 87;
         }
         if ((active0 & 0x246000000L) != 0L)
            return 87;
         return -1;
      case 6:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
            return 87;
         }
         if ((active0 & 0x820040000L) != 0L)
            return 87;
         return -1;
      case 7:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
            return 87;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 8;
            return 87;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
            return 87;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 1, 49);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 37:
         return jjStopAtPos(0, 70);
      case 39:
         return jjStartNfaWithStates_0(0, 58, 5);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         return jjStopAtPos(0, 68);
      case 43:
         return jjStopAtPos(0, 66);
      case 44:
         return jjStopAtPos(0, 56);
      case 45:
         return jjStopAtPos(0, 67);
      case 46:
         return jjStartNfaWithStates_0(0, 57, 16);
      case 47:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0xc0L, 0x0L);
      case 58:
         return jjStartNfaWithStates_0(0, 55, 56);
      case 59:
         return jjStopAtPos(0, 54);
      case 60:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 91:
         return jjStopAtPos(0, 52);
      case 93:
         return jjStopAtPos(0, 53);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20004000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x410018000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x940000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x60000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000400000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20c000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 50);
      case 125:
         return jjStopAtPos(0, 51);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x803400000L, active1, 0L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 87);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x90000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 111:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x60090000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x804000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4008000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x11008000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x280800000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 87);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400020000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 87);
         return jjMoveStringLiteralDfa3_0(active0, 0x2040000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 119:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800004000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 87);
         break;
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 87);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 87);
         return jjMoveStringLiteralDfa4_0(active0, 0x8040000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 87);
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 87);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 87);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 107:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 87);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4040000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 87);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 87);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 87);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 87);
         break;
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 87);
         break;
      case 104:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 87);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 87);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 87);
         break;
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 87);
         break;
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 87);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 16, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 86;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 87:
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0x84000058ffffc9ffL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     { jjCheckNAdd(56); }
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAddStates(3, 12); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(13, 16); }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(0, 1); }
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 0:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 2:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 6:
                  if (curChar == 39 && kind > 39)
                     kind = 39;
                  break;
               case 15:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(17, 20); }
                  break;
               case 18:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(20); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(21, 20); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(21, 25); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(26, 29); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(25, 24); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if (curChar == 32 && kind > 44)
                     kind = 44;
                  break;
               case 27:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 36:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 47:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 56:
                  if ((0x84000058ffffc9ffL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(56); }
                  break;
               case 57:
                  if (curChar == 34)
                     { jjCheckNAddStates(13, 16); }
                  break;
               case 58:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 59:
                  if (curChar == 34 && kind > 37)
                     kind = 37;
                  break;
               case 60:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 61:
                  if ((0x2400L & l) != 0L)
                     kind = 72;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(3, 12); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(63); }
                  break;
               case 64:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 67:
                  if (curChar != 46)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(68); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(68); }
                  break;
               case 69:
                  if (curChar != 46)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(30, 33); }
                  break;
               case 72:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(74); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(75, 74); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(75); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(34, 38); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(39, 42); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(79, 78); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(79); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(81, 15); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 69); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(85, 84); }
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(85); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 87:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(49, 52); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(53, 55); }
                  }
                  else if ((0xd0000001d0000001L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     { jjCheckNAdd(56); }
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(49, 52); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 86:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(49, 52); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 1:
                  if ((0x800000008000L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 3:
                  if ((0x400000004L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(56, 57); }
                  break;
               case 7:
                  if (curChar == 101 && kind > 40)
                     kind = 40;
                  break;
               case 8:
                  if (curChar == 117)
                     { jjCheckNAdd(7); }
                  break;
               case 9:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     { jjCheckNAdd(7); }
                  break;
               case 12:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(58, 59); }
                  break;
               case 31:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 38:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(53, 55); }
                  break;
               case 53:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 54:
                  if (curChar != 95)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(49, 52); }
                  break;
               case 56:
                  if ((0xd0000001d0000001L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(56); }
                  break;
               case 58:
                  { jjAddStates(60, 61); }
                  break;
               case 60:
                  { jjAddStates(62, 63); }
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(64, 65); }
                  break;
               case 65:
                  if ((0x10000000100L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 56:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(56); }
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(60, 61); }
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(62, 63); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 86 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     { jjCheckNAddStates(68, 70); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     { jjCheckNAddStates(68, 70); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 10;
                  { jjCheckNAddStates(68, 70); }
                  break;
               case 2:
                  if ((0x2400L & l) == 0L)
                     break;
                  kind = 10;
                  { jjCheckNAddStates(68, 70); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 10;
                  { jjCheckNAddStates(68, 70); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 13;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 13;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   53, 52, 54, 63, 64, 65, 66, 67, 69, 15, 80, 82, 84, 58, 59, 60, 
   61, 17, 18, 22, 24, 17, 18, 20, 23, 22, 17, 18, 20, 23, 71, 72, 
   76, 78, 71, 72, 74, 77, 76, 71, 72, 74, 77, 81, 15, 80, 83, 69, 
   82, 53, 52, 54, 55, 52, 54, 55, 5, 6, 18, 19, 58, 59, 60, 61, 
   64, 65, 72, 73, 0, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\142\162\145\141\153", "\143\154\141\163\163", 
"\143\157\156\163\164\162\165\143\164\157\162", "\145\154\163\145", "\145\170\164\145\156\144\163", "\146\157\162", 
"\151\146", "\151\156\164", "\156\145\167", "\160\162\151\156\164", "\162\145\141\144", 
"\162\145\164\165\162\156", "\163\164\162\151\156\147", "\163\165\160\145\162", "\143\150\141\162", 
"\142\157\157\154\145\141\156", "\144\157\165\142\154\145", "\167\150\151\154\145", "\144\157", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", null, null, 
"\156\165\154\154", null, null, null, null, null, null, null, null, null, "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\72", "\54", "\56", "\47", "\75", "\76", "\74", 
"\75\75", "\74\75", "\76\75", "\41\75", "\53", "\55", "\52", "\57", "\45", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x3600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 10;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 9))
       {
          jjmatchedKind = 9;
          jjmatchedPos = 0;
       }
       break;
     case 2:
       jjmatchedKind = 13;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 12))
       {
          jjmatchedKind = 12;
          jjmatchedPos = 0;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 71 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.err.println("Line " + input_stream.getEndLine() +
                           " - Invalid string found: " + image);
    countLexError++;
         break;
      case 72 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \u005c\u005cn: " + image);
    countLexError++;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public langXTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public langXTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 86; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "blockComment",
   "lineComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffff3fffffffc001L, 0x7fL, 
};
static final long[] jjtoSkip = {
   0x3ffeL, 0x180L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x180L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[86];
    private final int[] jjstateSet = new int[2 * 86];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
